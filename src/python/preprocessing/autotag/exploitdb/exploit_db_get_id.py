# This script gets the bugtraq id and the cve id for each exploit in the exploit-id database

import json, codecs, os, csv, nltk, re, urllib2
from nltk.tokenize import wordpunct_tokenize, sent_tokenize

# Read in the graphson file that was created by exploit_db.py
def unjsonify(inFile):
    obj_text = codecs.open(inFile, 'r', encoding='utf-8').read()
    obj = json.loads(obj_text)
    return obj

# Output the updated graphson file
def jsonify(obj, outFile):
    json.dump(obj, codecs.open(outFile, 'w', encoding='utf-8'),
    separators=(',',':'), sort_keys=True, indent=4) 

# Get the websites with the cve codes and bugtraq codes
def get_bugtraq_cve_sites(website):
    response = urllib2.urlopen(website)
    page_source = response.read()
    # Find and keep the links to the CVE information
    page_source = re.split('< |> |"',page_source)
    websites = []
    for i in page_source:
        if i[0:49] == 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE':
            websites.append(i)
    bugtraq_cve_dict = bugtraq_to_cve_table(websites)
    return bugtraq_cve_dict

# Create a dictionary containing the bugtraq ids and corresponding cve ids
def bugtraq_to_cve_table(websites):
    bugtraq_cve_dict = {}
    print len(websites)
    #for website_num in range(0,1000):
    for website_num in range(0,len(websites)):
        response = urllib2.urlopen(websites[website_num])
        page_source = response.read()
        page_source = re.split('<li>',page_source)
        bugtraq_id = filter(lambda x: "BID:" in x,page_source)
        if bugtraq_id != []:
            bugtraq_location = bugtraq_id[0].find('BID:')
            bid = bugtraq_id[0][bugtraq_location+4:bugtraq_location+12]
            bugtraq_id = filter(type(bid).isdigit,bid)
            bugtraq_cve_dict[bugtraq_id] = websites[website_num][-13:]
            
            # save the ids that have been obtained
            w = csv.writer(open("bugtraq_cve_correspondence_partial4.csv", "w"))
            for key, val in bugtraq_cve_dict.items():
                w.writerow([key, val, websites.index('http://cve.mitre.org/cgi-bin/cvename.cgi?name='+val)])
                
        if website_num % 1000 == 0:
            print 'CVE website number:', website_num
    return bugtraq_cve_dict

# Find the bugtraq id from the file
def get_bugtraq_id(filepath):
    # Read in the text from the file
    file_text = open(filepath,'r').read()
    # Divide it into sentences and then words
    file_text = [nltk.word_tokenize(t) for t in nltk.sent_tokenize(file_text)]
    # Search to see if the website is contained in the document
    website = []
    for i in range(0,len(file_text)):
        location = filter(lambda x: "www.securityfocus.com/bid" in x,file_text[i])
        if location != []:
            #assert website==[], 'More than one website found in file %r' % filepath
            if website == []: # the first instance is always where it says 'source:' followed by the website
                website = location
    # Get the bugtraq id number if a url to securityfocus is given
    if len(website) !=0 :
        website = website[0]
        website = website.split("/")
        #bugtraq_id = website[4]
        bugtraq_id_location = website.index('bid')+1
        bugtraq_id = website[bugtraq_id_location]
        return bugtraq_id
    else:
        return -1

def update_exploit_id_data(output_filepath, filename):
    # Read in the data from the exploit-db file
    exploit_id_data = unjsonify(infile)

    """# Get the table with the CVE Ids
    bugtraq_cve_dict = get_bugtraq_cve_sites("http://cve.mitre.org/data/refs/refmap/source-BUGTRAQ.html")
    # Save it so it doesn't have to be performed again
    w = csv.writer(open("bugtraq_cve_correspondence.csv", "w"))
    for key, val in bugtraq_cve_dict.items():
        w.writerow([key, val])
    print 'saved bugtraq-cve id table'"""

    # Read in the corespondence files from previous runs of this program
    bugtraq_cve_dict = {}
    for file_num in range(1,5):
        with open(output_filepath+'/bugtraq_cve_correspondence_partial' + str(file_num) + '.csv') as csv_file:
            reader = csv.reader(csv_file, delimiter=',', quotechar='"')
            for row in reader:
                bugtraq_cve_dict[row[0]] = row[1]

    # Loop over files
    #for file_num in range(18726,18736):
    for file_num in range(0,len(exploit_id_data["vertices"])):
        # Get the filepath
        filepath = exploit_id_data["vertices"][file_num]["filepath"]
        bugtraq_id = get_bugtraq_id(filepath)
        if bugtraq_id != -1:
            exploit_id_data["vertices"][file_num]["bugtraqID"] = bugtraq_id
            if str(bugtraq_id) in bugtraq_cve_dict.keys():
                exploit_id_data["vertices"][file_num]["vulnerabilityID"] = bugtraq_cve_dict[str(bugtraq_id)]
                check_data = file_num
        if file_num % 1000 == 0:
            print 'File number:', file_num

    print exploit_id_data["vertices"][check_data]

    # Output the updated graphson file
    jsonify(exploit_id_data, output_filepath + "/" + "ExploitDB_data_IDs.graphson")



filepath = r'C:/Users/Corinne/Desktop/exploitdb'
infile = 'ExploitDB_data.graphson'   
update_exploit_id_data(filepath, infile)

    